(function () {    'use strict';    angular        .module('vkrmsApp')        .filter('typeChange', FilterType)        .controller('NewScheduleController', NewScheduleController);    FilterType.$inject = ['NewScheduleService'];    function FilterType(NewScheduleService) {        return function (item, time) {            var str = NewScheduleService.getAllType();            var result = null;            var fl = false;            if (item) {                for (var i = 0; i < str.length; i++) {                    if (str[i].split('|')[1] == item) {                        if (item == 'REGULAR_WITH_OVERTIME' && !time) {                            result = null;                        } else {                            result = str[i].split('|')[0];                        }                        fl = true;                        break;                    }                }            }            if (!fl) {                result = null;            }            return result;        }    }    NewScheduleController.$inject = ['$scope', '$http', '$filter', '$timeout', 'CommonService', 'NewScheduleService', 'ngToast'];    function NewScheduleController($scope, $http, $filter, $timeout, commonService, NewScheduleService, ngToast) {        var nsc = this;        init();        $scope.search = search;        $scope.isFixedPostId = isFixedPostId;        $scope.getOptionShiftValue = getOptionShiftValue;        nsc.setBeforeShiftOvertime = setBeforeShiftOvertime;        nsc.setAfterShiftOvertime = setAfterShiftOvertime;        nsc.getAdditionOptionShiftValue = getAdditionOptionShiftValue;        nsc.selectPost = selectPost;        nsc.selectPostAddition = selectPostAddition;        nsc.selectType = selectType;        nsc.search = search;        nsc.editSchedule = editSchedule;        nsc.saveSchedule = saveSchedule;        nsc.closeModel = closeModel;        nsc.delShift = delShift;        nsc.cancelEditSchedule = cancelEditSchedule;        nsc.modelTabs = modelTabs;        nsc.copyPrevWeek = copyPrevWeek;        nsc.copyPreviousDay = copyPreviousDay;        function init() {            $scope.title = "万科资源管理信息系统 - 排班管理";            $scope.commonSearchBarConfig = {                isCompanySelectpickerMultiple: false,                isDepartmentSelectpickerMultipe: false,                companySelecterLabel: "公司范围",                departmentSelecterLabel: "部门/项目",                workgroupSelecterLabel: "岗位专业分类"            };            nsc.otherTypesLetter = NewScheduleService.getAllType();            nsc.editState = false;            nsc.modelState = false;            nsc.newTable = null;            $scope.editIndex = 0;            $scope.editWeek = 0;            nsc.tableTitle = {                employee: {                    employeeId: '资源编号',                    sapId: 'SAP编号',                    name: '姓名',                    jobName: '职位',                    workGroup: '岗位专业分类',                    experience: '经验值'                },                weekdays: nsc.weekdays,                workingHours: '常规出勤时长',                overWorkingHours: '加班时长',                lieuLeaveHours: '调休时长'            };            nsc.jobIdArray = ['50071070', '50385920'];            $('#schedule-table').css({                height: (window.innerHeight - 300) + 'px'            });            nsc.currentShift = {}        }        function modelTabs(id) {            if (id == 4 || id == 5) {                if (!nsc.currentShift.label) {                    ngToast.show('请先选择常规班次，再选择休假类型');                } else {                    $scope.tab = id;                }            }        }        function isFixedPostId(id) {            return nsc.jobIdArray.indexOf(id) > -1;        }        function search(type) {            commonService.storageSearchStatus($scope, {                selectedCompanies: $scope.selectedCompanies,                selectedDepartments: $scope.selectedDepartments,                departments: $scope.departments,                selectedGroups: $scope.selectedGroups,                beginDate: commonService.getSelectedDates().beginDate,                endDate: commonService.getSelectedDates().endDate,                keywords: $scope.keywords,                selectedStandardWorkJobs: $scope.selectedStandardWorkJobs            });            NewScheduleService                .getSchedules(getSearchParams(type))                .then(function (response) {                    nsc.scheduleShift = JSON.parse(JSON.stringify(response));                    nsc.editState = false;                    nsc.lockDates = nsc.scheduleShift.lockDates;                    var departmentId = _.pluck($scope.selectedDepartments, 'department_id');                    nsc.departmentId = _.pluck($scope.selectedDepartments, 'department_id');                    $scope.$parent.departmentId = departmentId.length > 0 ? departmentId[0] : "";                    NewScheduleService.getShiftsFromServer(departmentId)                        .then(function (shifts) {                            $scope.defaultShifts = shifts;                            NewScheduleService.getPostOptionsFromServer(departmentId)                                .then(function (result) {                                    $scope.fixedPosts = result.fixedPosts;                                    nsc.fixedPostsAndShift = result.fixedPostsAndShift;                                })                        })                    nsc.newTable = {                        employees: nsc.scheduleShift.employees,                        startDate: $filter('date')(changeDate(new Date(nsc.scheduleShift.startDate), 1), 'yyyy-MM-dd'),                        endDate: $filter('date')(changeDate(new Date(nsc.scheduleShift.endDate), -1), 'yyyy-MM-dd'),                        schedules: []                    };                    nsc.currentDate = changeDate(new Date(response.startDate), 1);                    nsc.days = getDays(nsc.currentDate);                    nsc.tableTitle.weekdays = applyWeek(response.startDate);                    applyScheduleTable(response.employees);                });        }        function editSchedule() {            if (nsc.newTable == null) {                return false;            }            nsc.editState = true;        }        function cancelEditSchedule() {            nsc.editState = false;            nsc.search()        }        function saveSchedule() {            buildScheduleSave()            $http.put(apiBaseUrl + "/schedule-sheet", nsc.newTable, {headers: utils.generateHeaders()})                .then(function (result) {                    var status = result.status;                    var dataStatus = result.data.status;                    var scheduleSheet = result.data;                    if (null != dataStatus && dataStatus != undefined && (dataStatus == "AttendanceIsLockException" )) {                        commonService.alert({                            content: scheduleSheet.errorMessage,                            icon: "fa-exclamation-circle",                            iconColor: "icon-red"                        });                    }                    if (null != dataStatus && dataStatus != undefined && (dataStatus == "fail" )) {                        commonService.alert({                            content: result.data.errorMessage,                            icon: "fa-exclamation-circle",                            iconColor: "icon-red"                        });                    } else {                        nsc.editState = false;                        nsc.copyWeekState = false;                    }                    nsc.modelState = false;                }, function (result) {                    commonService.alert({                        content: '网络异常，请重新连接网络',                        icon: "fa-exclamation-circle",                        iconColor: "icon-red"                    });                })        }        function copyPrevWeek() {            nsc.copyWeekState = true;            var datetime = {                start: changeDate(new Date(nsc.currentDate), -7),                end: changeDate(new Date(nsc.currentDate), -1)            }            var firstDay = nsc.days[0];            var previousWeekDateMilliSecond = Date.parse(firstDay.replace(/-/g, "/")) - 7 * 24 * 60 * 60 * 1000;            var newSearchKey = {                "departments": _.pluck($scope.selectedDepartments, 'department_id'),                "workingGroups": _.pluck($scope.selectedGroups, 'work_group_id'),                "standardWorkJobs": _.pluck($scope.selectedStandardWorkJobs, 'workJobId'),                "beginDate": $filter('date')(datetime.start, 'M/dd/yyyy'),                "endDate": $filter('date')(datetime.end, 'M/dd/yyyy'),                "keywords": $scope.keywords            };            $http.get(apiBaseUrl + "/schedule-sheet/" + previousWeekDateMilliSecond, {                params: {search: newSearchKey}            }).success(function (response) {                nsc.copyPrevWeekDate = JSON.parse(JSON.stringify(response.schedules));                applyScheduleTable(response.employees, 'copy');            }).error(function () {                NewScheduleService.copyPreviousFail            });        }        function copyPreviousDay(item) {            var onDutyDay = item.split('(')[0];            var day = new Date().getFullYear() + '-' + onDutyDay;            var yesterday = NewScheduleService.getDateStr(day, -1);            var weekIndex = new Date(day).getDay();            var copySchedules = JSON.parse(JSON.stringify(nsc.scheduleTable));            var isEmpty = true;            angular.forEach(copySchedules, function (copySchedule) {                var news = null;                if (weekIndex == 1) {                    if (copySchedule.scheduleCells[0].label != null || copySchedule.scheduleCells[0].fragmentBeginTime != null) {                        isEmpty = false;                    }                    var flagNum, flagContinue = false;                    if (copySchedule.schedules) {                        for (var i = 0; i < copySchedule.schedules.length; i++) {                            if (copySchedule.schedules[i].onDutyDay == yesterday) {                                flagNum = i;                                flagContinue = true;                            }                        }                    }                    if (flagContinue) {                        news = JSON.parse(JSON.stringify(copySchedule.schedules[flagNum]));                        news.id = null;                        news.onDutyDay = day;                    } else {                        news = NewScheduleService.getEmptyScheduleCell(copySchedule, day);                    }                    angular.extend(copySchedule.scheduleCells[0], news);                } else if (weekIndex == 0) {                    if (copySchedule.scheduleCells[6].label != null || copySchedule.scheduleCells[6].fragmentBeginTime != null) {                        isEmpty = false;                    }                    if (typeof copySchedule.scheduleCells[5].type == 'undefined') {                        news = NewScheduleService.getEmptyScheduleCell(copySchedule, day);                    } else {                        news = JSON.parse(JSON.stringify(copySchedule.scheduleCells[5]));                        news.id = null;                        news.onDutyDay = day;                    }                    angular.extend(copySchedule.scheduleCells[6], news);                } else {                    if (copySchedule.scheduleCells[weekIndex - 1].label != null || copySchedule.scheduleCells[weekIndex - 1].fragmentBeginTime != null) {                        isEmpty = false;                    }                    if (typeof copySchedule.scheduleCells[weekIndex - 2].type == 'undefined') {                        news = NewScheduleService.getEmptyScheduleCell(copySchedule, day);                    } else {                        news = JSON.parse(JSON.stringify(copySchedule.scheduleCells[weekIndex - 2]));                        news.id = null;                        news.onDutyDay = day;                    }                    angular.extend(copySchedule.scheduleCells[weekIndex - 1], news);                }            });            if (!isEmpty) {                commonService.confirm({                    content: '确定删除当天排班信息，并复制前一天排班信息到当天吗？',                    callback: function () {                        nsc.scheduleTable = copySchedules;                    }                });            } else {                nsc.scheduleTable = copySchedules;            }        }        function getSearchParams(type) {            var week = getWeekInterval(type);            var searchInfo = {                "departments": _.pluck($scope.selectedDepartments, 'department_id'),                "workingGroups": _.pluck($scope.selectedGroups, 'work_group_id'),                "standardWorkJobs": _.pluck($scope.selectedStandardWorkJobs, 'workJobId'),                "beginDate": utils.formatDate(week.beginDate),                "endDate": utils.formatDate(week.endDate),                "keywords": $scope.keywords            };            return searchInfo;        }        function getWeekInterval(type) {            var beginDate = null;            switch (type) {                case "previous":                    beginDate = changeDate(new Date(nsc.currentDate), -7);                    break;                case "next":                    beginDate = changeDate(new Date(nsc.currentDate), 7);                    break;                default:                    beginDate = $('#scheduledatepicker input[name=start]').datepicker('getDate');            }            return {                "beginDate": beginDate,                "endDate": changeDate(beginDate, 6)            };        }        function changeDate(date, increment) {            if (date) {                return new Date(date.setDate(date.getDate() + increment));            }            return null;        }        function changeDay(date, increment) {            var days = new Date(date);            var daysParse = days.setDate(days.getDate() + increment)            return $filter('date')(daysParse, 'yyyy-MM-dd');        }        function applyWeek(date) {            var oneDayParse = 86400000; //  1000*60*60*24;            var current = Date.parse(date.replace(/-/g, "/"));            var buildWeek = [];            for (var i = 0; i < 7; i++) {                current += oneDayParse;                buildWeek.push($filter('date')(current, 'MM-dd') + '(' + $filter('date')(current, 'EEE') + ')');            }            return buildWeek;        }        function applyScheduleTable(obj, type) {            for (var i = 0; i < obj.length; i++) {                var newSchedules = [];                if (obj[i].schedules) {                    angular.forEach(nsc.days, function (days) {                        var isActive = false;                        for (var k = 0; k < obj[i].schedules.length; k++) {                            if (type) {                                var dates = new Date(obj[i].schedules[k].onDutyDay);                                var filterDate = dates.setDate(dates.getDate() + 7);                                if (days == $filter('date')(filterDate, 'yyyy-MM-dd')) {                                    isActive = true;                                    obj[i].schedules[k].onDutyDay = $filter('date')(filterDate, 'yyyy-MM-dd');                                    obj[i].schedules[k].id = null;                                    newSchedules.push(obj[i].schedules[k])                                    break;                                }                            } else {                                if (days == obj[i].schedules[k].onDutyDay) {                                    isActive = true;                                    newSchedules.push(obj[i].schedules[k])                                    break;                                }                            }                        }                        if (!isActive) {                            var newArray = {                                id: null,                                label: null,                                departmentId: obj[i].departmentId,                                employeeId: obj[i].employeeId,                                onDutyDay: days,                                name: obj[i].name                            }                            newSchedules.push(newArray)                        }                    })                    obj[i].scheduleCells = newSchedules;                } else {                    angular.forEach(nsc.days, function (days) {                        var newArray = {                            id: null,                            label: null,                            departmentId: obj[i].departmentId,                            employeeId: obj[i].employeeId,                            onDutyDay: days,                            name: obj[i].name                        }                        newSchedules.push(newArray)                    })                    obj[i].scheduleCells = newSchedules;                }            }            nsc.scheduleTable = obj;        }        $scope.mouseOverThing = function (item, schedule, index, week) {            if (nsc.editState) {                if (validaLockDates(schedule)) {                    ngToast.show('该班次已定案！')                } else {                    checkDayGroup(item, week);                    openModel()                    nsc.loadingDate = false;                    buildScheduleModel(item, schedule, index, week)                }            }        };        function checkDayGroup(item, week) {            var currentDay = item.scheduleCells[week], prevDay, nextDay;            if (week > 0 && week < 6) {                if (typeof item.scheduleCells[week - 1].type == 'undefined') {                    prevDay = null;                } else {                    prevDay = item.scheduleCells[week - 1];                }                if (typeof item.scheduleCells[week + 1].type == 'undefined') {                    nextDay = null;                } else {                    nextDay = item.scheduleCells[week + 1];                }            } else if (week == 0) {                var isHavePrevDay = false;                if (item.schedules) {                    for (var i = 0; i < item.schedules.length; i++) {                        if (item.schedules[i].onDutyDay == changeDay(new Date(currentDay.onDutyDay), -1)) {                            prevDay = item.schedules[i];                            isHavePrevDay = true;                            break;                        }                    }                }                prevDay = isHavePrevDay ? prevDay : null;                if (typeof item.scheduleCells[week + 1].type == 'undefined') {                    nextDay = null;                } else {                    nextDay = item.scheduleCells[week + 1];                }            } else if (week == 6) {                var isHaveNextDay = false;                if (item.schedules) {                    for (var i = 0; i < item.schedules.length; i++) {                        if (item.schedules[i].onDutyDay == changeDay(new Date(currentDay.onDutyDay), 1)) {                            nextDay = item.schedules[i];                            isHaveNextDay = true;                            break;                        }                    }                }                if (typeof item.scheduleCells[week - 1].type == 'undefined') {                    prevDay = null;                } else {                    prevDay = item.scheduleCells[week - 1];                }                nextDay = isHaveNextDay ? nextDay : null;            }            nsc.dateGroup = {                today: currentDay,                prevDay: prevDay,                nextDay: nextDay            }            oneDay(nsc.dateGroup.prevDay, nsc.dateGroup.today, nsc.dateGroup.nextDay)        }        function oneDay(prev, today, next) {            if (prev) {                if (typeof prev.type == 'undefined') {                    nsc.prevDayLastTime = null;                } else {                    var prevs = buildDay(prev);                    var prevForm = transform(prevs);                    prevForm.sort(function (a, b) {                        return a - b;                    })                    nsc.prevDayLastTime = prevForm[7];                    if (nsc.prevDayLastTime > 48) {                        nsc.prevDayLastTime -= 48;                    } else {                        nsc.prevDayLastTime = null;                    }                }            } else if (prev == null) {                nsc.prevDayLastTime = null;            }            if (today) {                nsc.todayDuration = buildDay(today);            }            if (today == null) {                nsc.todayDuration = null            }            if (next) {                if (typeof next.type == 'undefined') {                    nsc.prevDayLastTime = null;                } else {                    var nexts = buildDay(next);                    var nextForm = transform(nexts);                    nextForm.sort(function (a, b) {                        return a - b;                    })                    var isTrue = false;                    for (var i = 0; i < nextForm.length; i++) {                        if (nextForm[i] >= 0) {                            isTrue = true;                            nsc.nextDayFirstTime = nextForm[i] + 48;                            break;                        }                    }                    nsc.nextDayFirstTime = isTrue ? nsc.nextDayFirstTime : null;                }            } else if (next == null) {                nsc.nextDayFirstTime = null;            }        }        function buildDay(today) {            var start = defaultTimeDuration.indexOf(today.onDutyTime);            var end = defaultTimeDuration.indexOf(today.offDutyTime);            var startAddition = defaultTimeDuration.indexOf(today.onDutyTimeAddition);            var endAddition = defaultTimeDuration.indexOf(today.offDutyTimeAddition);            var fragmentBegin = defaultTimeDuration.indexOf(today.fragmentBeginTime);            var fragmentEnd = defaultTimeDuration.indexOf(today.fragmentEndTime);            if (end < start) {                end += 48;            } else if (endAddition < startAddition) {                endAddition += 48;            } else if (fragmentEnd < fragmentBegin) {                fragmentEnd += 48;            }            return {                labelBegin: start,                labelEnd: end,                after: end + today.afterShiftOvertimeDuration * 2,                before: start - today.beforeShiftOvertimeDuration * 2,                additionLabelBegin: startAddition,                additionLabelEnd: endAddition,                fragmentBegin: fragmentBegin,                fragmentEnd: fragmentEnd            }        }        // 是否定案        function validaLockDates(item) {            var flagClick = false;            if (nsc.lockDates) {                for (var i = 0; i < nsc.lockDates.length; i++) {                    if (item.onDutyDay == nsc.lockDates[i]) {                        flagClick = true;                        break;                    }                }                if (flagClick) {                    return true;                } else {                    return false;                }            } else {                return false;            }        }        function openModel() {            nsc.modelState = true;        }        function closeModel() {            nsc.modelState = false;        }        var defaultTimeDuration = getFragmentTimeOptions();        $scope.beginTime = '00:00:00';        $scope.endTime = '36:00:00';        var newTime = defaultTimeDuration.slice(defaultTimeDuration.indexOf($scope.beginTime), defaultTimeDuration.indexOf($scope.endTime) + 1);        $scope.pocketsTime = {            minValue: 0,            maxValue: 72,            options: {                floor: 0,                ceil: 72,                translate: function (value) {                    return newTime[value];                }            }        };        $scope.$watch('pocketsTime.minValue', function () {            if (nsc.todayDuration && $scope.pocketsTime.minValue != '00:00:00') {                if ($scope.pocketsTime.minValue > 47) {                    ngToast.show('加班开始时间必须在当天范围内！');                    return false                } else if (nsc.todayDuration.labelBegin >= 0 && $scope.pocketsTime.minValue > nsc.todayDuration.before && $scope.pocketsTime.minValue < nsc.todayDuration.after) {                    ngToast.show('加班时间与常规班次时间重叠');                    return false;                } else if (nsc.todayDuration.labelBegin >= 0 && $scope.pocketsTime.minValue < nsc.todayDuration.before && $scope.pocketsTime.maxValue > nsc.todayDuration.after) {                    ngToast.show('加班时间与常规班次时间重叠');                    return false;                } else if (nsc.prevDayLastTime && $scope.pocketsTime.minValue < nsc.prevDayLastTime) {                    ngToast.show('加班时间与前一天时间重合');                    return false;                } else {                    nsc.currentShift.fragmentBeginTime = newTime[$scope.pocketsTime.minValue];                }                if (nsc.currentShift.fragmentEndTime) {                    delShift('additionShift')                    nsc.currentShift.lieuLeaveBeginTime = null;                    nsc.currentShift.lieuLeaveEndTime = null;                    nsc.todayDuration.fragmentBegin = $scope.pocketsTime.minValue;                    nsc.currentShift.type = 'REGULAR_WITH_OVERTIME'                }            }        });        $scope.$watch('pocketsTime.maxValue', function () {            if (nsc.todayDuration && $scope.pocketsTime.maxValue != '36:00:00') {                if (nsc.todayDuration.labelBegin >= 0 && $scope.pocketsTime.maxValue > nsc.todayDuration.before && $scope.pocketsTime.maxValue < nsc.todayDuration.after) {                    ngToast.show('加班时间与常规班次时间重叠')                    return false;                } else if (nsc.todayDuration.labelBegin >= 0 && $scope.pocketsTime.minValue < nsc.todayDuration.before && $scope.pocketsTime.maxValue > nsc.todayDuration.after) {                    ngToast.show('加班时间与常规班次时间重叠');                    return false;                } else if (nsc.nextDayFirstTime && $scope.pocketsTime.maxValue > nsc.nextDayFirstTime) {                    ngToast.show('加班时间与下一天班次时间重叠');                    return false;                } else {                    nsc.currentShift.fragmentEndTime = newTime[$scope.pocketsTime.maxValue];                }                if (nsc.currentShift.fragmentBeginTime) {                    delShift('additionShift')                    nsc.currentShift.lieuLeaveBeginTime = null;                    nsc.currentShift.lieuLeaveEndTime = null;                    nsc.todayDuration.fragmentEnd = $scope.pocketsTime.maxValue;                    nsc.currentShift.type = 'REGULAR_WITH_OVERTIME';                }            }        });        function buildScheduleModel(item, schedule, index, week) {            $timeout(function () {                nsc.loadingDate = true;            }, 200)            $scope.extendTime = extendTime()            $scope.showTable = {                name: item.name,                member: item.jobName,                experience: item.experience,                datetime: schedule.onDutyDay,                jobId: item.jobId,                departmentId: item.departmentId            };            resetCurrentShift(schedule, index, week)            refreshGrass(nsc.currentShift);            refreshPockets(nsc.currentShift);        }        function refreshPockets(shift) {            if (shift.fragmentBeginTime) {                $scope.pocketsTime.minValue = defaultTimeDuration.indexOf(shift.fragmentBeginTime);                $scope.pocketsTime.maxValue = defaultTimeDuration.indexOf(shift.fragmentEndTime);            }        }        function refreshGrass() {            var shift = nsc.currentShift;            var min, max, floor, ceil;            if (!shift.label) {                return;            } else {                floor = defaultTimeDuration.indexOf(shift.onDutyTime);                ceil = defaultTimeDuration.indexOf(shift.offDutyTime);            }            if (ceil < floor) {                ceil = ceil + 48;            }            if (shift.lieuLeaveBeginTime) {                min = defaultTimeDuration.indexOf(shift.lieuLeaveBeginTime);                max = defaultTimeDuration.indexOf(shift.lieuLeaveEndTime);            }            $scope.grass = {                minValue: min || floor,                maxValue: max || ceil,                options: {                    floor: floor,                    ceil: ceil,                    translate: function (value) {                        return defaultTimeDuration[value];                    }                }            };            $scope.$watch('grass.minValue', function () {                if (nsc.editState && nsc.currentShift.type && nsc.currentShift.type != 'REGULAR' && nsc.currentShift.type != 'REGULAR_WITH_OVERTIME' && nsc.currentShift.type != 'HOLIDAY') {                    if (($scope.grass.maxValue - $scope.grass.minValue) < 8) {                        ngToast.show('调休时间段需大于4小时')                    } else {                        if ($scope.grass.minValue != $scope.grass.options.floor && $scope.grass.maxValue != $scope.grass.options.ceil) {                            ngToast.show('时间段只能选取前半段或后半段')                        } else {                            nsc.currentShift.lieuLeaveBeginTime = defaultTimeDuration[$scope.grass.minValue];                        }                    }                    if (nsc.currentShift.lieuLeaveEndTime) {                        delShift('additionShift')                        delShift('fragmentShift')                    }                }            });            $scope.$watch('grass.maxValue', function () {                if (nsc.editState && nsc.currentShift.type && nsc.currentShift.type != 'REGULAR' && nsc.currentShift.type != 'REGULAR_WITH_OVERTIME' && nsc.currentShift.type != 'HOLIDAY') {                    if (($scope.grass.maxValue - $scope.grass.minValue) < 8) {                        ngToast.show('调休时间段需大于4小时')                    } else {                        if ($scope.grass.minValue != $scope.grass.options.floor && $scope.grass.maxValue != $scope.grass.options.ceil) {                            ngToast.show('时间段只能选取前半段或后半段')                        } else {                            nsc.currentShift.lieuLeaveEndTime = defaultTimeDuration[$scope.grass.maxValue];                        }                    }                    if (nsc.currentShift.lieuLeaveBeginTime) {                        delShift('additionShift')                        delShift('fragmentShift')                    }                }            });        }        function setBeforeShiftOvertime(time) {            if (nsc.currentShift.label == null) {                ngToast.show('请选择常规班次！')                return false;            }            if (oneDayTimeCheck('before', time)) {                return false;            }            nsc.currentShift.beforeShiftOvertimeDuration = time;            nsc.todayDuration.before = nsc.todayDuration.labelBegin - time * 2;            delShift('otherType');            resetCurrentShift(nsc.currentShift)        }        function setAfterShiftOvertime(time) {            if (nsc.currentShift.label == null) {                ngToast.show('请选择常规班次！')                return false;            }            if (oneDayTimeCheck('after', time)) {                return false;            }            nsc.currentShift.afterShiftOvertimeDuration = time;            nsc.todayDuration.after = nsc.todayDuration.labelEnd + time * 2;            delShift('otherType');            resetCurrentShift(nsc.currentShift)        }        function getOptionShiftValue(obj) {            if (oneDayTimeCheck('label', obj)) {                return false;            }            //var experience = getExperienceByLabel(obj);            //if (experience > $scope.showTable.experience) {            //    ngToast.show($scope.showTable.name + '在' + $scope.showTable.datetime + '的排班不满足上岗要求，需要经验值' + experience + ',请重新排版');            //    return false;            //}            nsc.currentShift.label = obj.label || null;            nsc.currentShift.offDutyTime = obj.offDutyTime || null;            nsc.currentShift.onDutyTime = obj.onDutyTime || null;            nsc.currentShift.diningDuration = obj.diningDuration || 0;            nsc.todayDuration.labelBegin = defaultTimeDuration.indexOf(obj.onDutyTime);            nsc.todayDuration.labelEnd = defaultTimeDuration.indexOf(obj.offDutyTime);            if (nsc.todayDuration.labelBegin > nsc.todayDuration.labelEnd) {                nsc.todayDuration.labelEnd += 48;            }            delShift('additionShift');            delShift('otherType');            delShift('beforeShift');            delShift('afterShift');            delShift('fragmentShift');            refreshGrass(nsc.currentShift);            refreshPockets(nsc.currentShift)            if (obj == '月休') {                delShift('shift')                nsc.currentShift.type = 'HOLIDAY'            }            validateSchedules(nsc.currentShift)        }        // 时间轴验证        function oneDayTimeCheck(type, obj) {            if (type == 'label') {                var newLabelBegin = defaultTimeDuration.indexOf(obj.onDutyTime);                var newLabelEnd = defaultTimeDuration.indexOf(obj.offDutyTime);                if (newLabelBegin > newLabelEnd) {                    newLabelEnd += 48;                }                if (obj != '月休' && nsc.prevDayLastTime && newLabelBegin < nsc.prevDayLastTime) {                    ngToast.show('常规班与上一天班次时间重叠')                    return true                } else if (obj != '月休' && nsc.nextDayFirstTime && newLabelEnd > nsc.nextDayFirstTime) {                    ngToast.show('常规班与下一天班次时间重叠')                    return true                }            } else if (type == 'labelAddition') {                var newAdditionLabelBegin = defaultTimeDuration.indexOf(obj.onDutyTime);                var newAdditionLabelEnd = defaultTimeDuration.indexOf(obj.offDutyTime);                if (newAdditionLabelBegin > newAdditionLabelEnd) {                    newAdditionLabelEnd += 48;                }                if (newAdditionLabelBegin == nsc.todayDuration.before && newAdditionLabelEnd == nsc.todayDuration.after) {                    ngToast.show('二次班次与常规班时间重叠')                    return true                } else if (nsc.prevDayLastTime && newAdditionLabelBegin < nsc.prevDayLastTime) {                    ngToast.show('二次班次与上一天班次时间重叠')                    return true                } else if (nsc.nextDayFirstTime && newAdditionLabelEnd > 48 && newAdditionLabelEnd > nsc.nextDayFirstTime) {                    ngToast.show('二次班次与下一天班次时间重叠')                    return true                } else if (newAdditionLabelEnd > nsc.todayDuration.before && newAdditionLabelEnd < nsc.todayDuration.after) {                    ngToast.show('二次班次与常规班时间重叠')                    return true                } else if (newAdditionLabelBegin > nsc.todayDuration.before && newAdditionLabelBegin < nsc.todayDuration.after) {                    ngToast.show('二次班次与常规班时间重叠')                    return true                }            } else if (type == "before") {                var newBefore = nsc.todayDuration.labelBegin - obj * 2;                if (newBefore < 0) {                    ngToast.show('班前加班不能超过当天凌晨00:00')                    return true                } else if (nsc.prevDayLastTime && newBefore < nsc.prevDayLastTime) {                    ngToast.show('班前加班与上一天班次时间重叠')                    return true                } else if (newBefore > nsc.todayDuration.fragmentBegin && newBefore < nsc.todayDuration.fragmentEnd) {                    ngToast.show('班前加班与零星加班时间重叠')                    return true                } else if (newBefore > nsc.todayDuration.additionLabelBegin && newBefore < nsc.todayDuration.additionLabelEnd) {                    ngToast.show('班前加班与二次班次时间重叠')                    return true                }            } else if (type == 'after') {                var newAfter = nsc.todayDuration.labelEnd + obj * 2;                if (newAfter > 72) {                    ngToast.show('班后加班不能超过第二天12:00')                    return true                } else if (nsc.nextDayFirstTime && newAfter > nsc.nextDayFirstTime) {                    ngToast.show('班后加班与第二天班次时间重叠')                    return true                } else if (newAfter > nsc.todayDuration.fragmentBegin && newAfter < nsc.todayDuration.fragmentEnd) {                    ngToast.show('班后加班与零星加班时间重叠')                    return true                } else if (newAfter > nsc.todayDuration.additionLabelBegin && newAfter < nsc.todayDuration.additionLabelEnd) {                    ngToast.show('班后加班与二次班次时间重叠')                    return true                }            }        }        function getAdditionOptionShiftValue(item) {            if (!nsc.currentShift.label) {                ngToast.show('请先选择常规班次！')                return false;            }            if (oneDayTimeCheck('labelAddition', item)) {                return false;            }            nsc.currentShift.labelAddition = item.label;            nsc.currentShift.onDutyTimeAddition = item.onDutyTime;            nsc.currentShift.offDutyTimeAddition = item.offDutyTime;            nsc.currentShift.diningDurationAddition = item.diningDuration;            nsc.currentShift.labelFixedPostAdditionId = null;            nsc.currentShift.labelFixedPostAdditionName = null;            nsc.todayDuration.additionLabelBegin = defaultTimeDuration.indexOf(item.onDutyTime);            nsc.todayDuration.additionLabelEnd = defaultTimeDuration.indexOf(item.offDutyTime);            if (nsc.todayDuration.additionLabelBegin > nsc.todayDuration.additionLabelEnd) {                nsc.todayDuration.additionLabelEnd += 48;            }            delShift('otherType');            delShift('fragmentShift');            resetCurrentShift(nsc.currentShift)        }        function selectPost(post) {            if (!nsc.currentShift.label) {                ngToast.show('请先选择常规班次！')                return            }            //var experience = getExperienceByLabelAndFixedPost(post);            //if (experience > $scope.showTable.experience) {            //    ngToast.show($scope.showTable.name + '在' + $scope.showTable.datetime + '的排班不满足上岗要求，需要经验值' + experience + ',请重新排版');            //    return false;            //}            nsc.currentShift.labelFixedPostId = post.fixedPostId;            nsc.currentShift.labelFixedPostName = post.fixedPostName;            resetCurrentShift(nsc.currentShift)        }        function selectPostAddition(post) {            if (!nsc.currentShift.labelAddition) {                ngToast.show('请先选择二次常规班次！')                return            }            //var experience = getExperienceByLabelAndFixedPost(post, 'additionLabel');            //if (experience > $scope.showTable.experience) {            //    ngToast.show($scope.showTable.name + '在' + $scope.showTable.datetime + '的排班不满足上岗要求，需要经验值' + experience + ',请重新排版');            //    return false;            //}            nsc.currentShift.labelFixedPostAdditionId = post.fixedPostId;            nsc.currentShift.labelFixedPostAdditionName = post.fixedPostName;            resetCurrentShift(nsc.currentShift);        }        function selectType(item) {            if (!nsc.currentShift.label) {                ngToast.show('请先选择常规班次！')                return false;            } else                var days = nsc.currentShift.onDutyDay.replace(/-/g, "/");            if (new Date(days + ' ' + nsc.currentShift.onDutyTime) > new Date(days + ' ' + nsc.currentShift.offDutyTime)) {                var kk = defaultTimeDuration.indexOf(nsc.currentShift.offDutyTime);                nsc.currentShift.lieuLeaveEndTime = defaultTimeDuration[kk + 48];            } else {                nsc.currentShift.lieuLeaveEndTime = nsc.currentShift.offDutyTime;            }            nsc.currentShift.type = item;            nsc.currentShift.lieuLeaveBeginTime = nsc.currentShift.onDutyTime;            nsc.currentShift.beforeShiftOvertimeDuration = 0;            nsc.currentShift.afterShiftOvertimeDuration = 0;            delShift('fragmentShift');            delShift('additionShift');            resetCurrentShift(nsc.currentShift);        }        function delShift(type) {            switch (type) {                case 'shift':                    nsc.currentShift.label = null;                    nsc.currentShift.onDutyTime = null;                    nsc.currentShift.offDutyTime = null;                    nsc.currentShift.diningDuration = null;                    nsc.currentShift.labelFixedPostId = null;                    nsc.currentShift.labelFixedPostName = null;                    nsc.currentShift.beforeShiftOvertimeDuration = 0;                    nsc.currentShift.afterShiftOvertimeDuration = 0;                    nsc.todayDuration.labelBegin = -1;                    nsc.todayDuration.labelEnd = -1;                    nsc.todayDuration.before = -1;                    nsc.todayDuration.after = -1;                    nsc.disabedTabs = true;                    if (nsc.currentShift.fragmentBeginTime == null) {                        nsc.currentShift.type = null;                    }                    break;                case 'beforeShift':                    nsc.currentShift.beforeShiftOvertimeDuration = 0;                    nsc.todayDuration.before = nsc.todayDuration.labelBegin;                    break;                case 'afterShift':                    nsc.currentShift.afterShiftOvertimeDuration = 0;                    nsc.todayDuration.after = nsc.todayDuration.labelEnd;                    break;                case 'additionShift':                    nsc.currentShift.labelAddition = null;                    nsc.currentShift.onDutyTimeAddition = null;                    nsc.currentShift.offDutyTimeAddition = null;                    nsc.currentShift.diningDurationAddition = null;                    nsc.currentShift.labelFixedPostAdditionId = null;                    nsc.currentShift.labelFixedPostAdditionName = null;                    nsc.currentShift.diningDurationAddition = null;                    nsc.todayDuration.additionLabelBegin = -1;                    nsc.todayDuration.additionLabelEnd = -1;                    break;                case 'otherType':                    nsc.currentShift.type = null;                    nsc.currentShift.lieuLeaveBeginTime = null;                    nsc.currentShift.lieuLeaveEndTime = null;                    break;                case 'fragmentShift':                    nsc.currentShift.fragmentBeginTime = null;                    nsc.currentShift.fragmentEndTime = null;                    nsc.todayDuration.fragmentBegin = -1;                    nsc.todayDuration.fragmentEnd = -1;                    if (nsc.currentShift.label == null) {                        nsc.currentShift.type = null;                    }                    break;            }        }        function resetCurrentShift(object) {            nsc.currentShift = {                beforeShiftOvertimeDuration: object.beforeShiftOvertimeDuration || 0,                afterShiftOvertimeDuration: object.afterShiftOvertimeDuration || 0,                countDuration: object.countDuration || null,                departmentId: nsc.departmentId.join(''),                diningDuration: object.diningDuration || 0,                diningDurationAddition: object.diningDurationAddition || null,                employeeId: object.employeeId,                fragmentBeginTime: object.fragmentBeginTime || null,                fragmentEndTime: object.fragmentEndTime || null,                id: object.id || null,                label: object.label || null,                labelAddition: object.labelAddition || null,                labelFixedPostAdditionId: object.labelFixedPostAdditionId || null,                labelFixedPostAdditionName: object.labelFixedPostAdditionName || null,                labelFixedPostId: object.labelFixedPostId || null,                labelFixedPostName: object.labelFixedPostName || null,                lieuLeaveBeginTime: object.lieuLeaveBeginTime || null,                lieuLeaveEndTime: object.lieuLeaveEndTime || null,                name: object.name || null,                offDutyTime: object.offDutyTime || null,                offDutyTimeAddition: object.offDutyTimeAddition || null,                onDutyDay: object.onDutyDay || null,                onDutyTime: object.onDutyTime || null,                onDutyTimeAddition: object.onDutyTimeAddition || null,                sapId: object.sapId || null,                timeDuration: object.timeDuration || null,                type: object.type || null,            }            if (object.fragmentBeginTime) {                $scope.beginTime = object.fragmentBeginTime                $scope.endTime = object.fragmentEndTime            }            if (object.fragmentBeginTime) {                $scope.beginTime = object.fragmentBeginTime;            }            if (arguments.length == 3) {                var index = arguments[1];                var week = arguments[2];                validateSchedules(nsc.currentShift, index, week)            } else {                validateSchedules(nsc.currentShift)            }        }        function validateSchedules(schedules) {            if (arguments.length == 3) {                $scope.editIndex = arguments[1];                $scope.editWeek = arguments[2];            }            if (nsc.scheduleTable) {                nsc.scheduleTable[$scope.editIndex].scheduleCells.splice($scope.editWeek, 1, schedules);            }        }        function getExperienceByLabelAndFixedPost(post, type) {            var result = null;            for (var i = 0; i < nsc.fixedPostsAndShift.length; i++) {                if (type && nsc.currentShift.labelAddition == nsc.fixedPostsAndShift[i].shiftLabel && post.fixedPostId == nsc.fixedPostsAndShift[i].fixedPostId) {                    result = nsc.fixedPostsAndShift[i].experience;                    break;                } else if (!type && nsc.currentShift.label == nsc.fixedPostsAndShift[i].shiftLabel && post.fixedPostId == nsc.fixedPostsAndShift[i].fixedPostId) {                    result = nsc.fixedPostsAndShift[i].experience;                    break;                }            }            return result;        }        function getExperienceByLabel(obj) {            var result = null;            for (var i = 0; i < nsc.fixedPostsAndShift.length; i++) {                if (nsc.currentShift.labelFixedPostId == nsc.fixedPostsAndShift[i].fixedPostId && obj.label == nsc.fixedPostsAndShift[i].shiftLabel) {                    result = nsc.fixedPostsAndShift[i].experience;                    break;                }            }            return result;        }        function buildScheduleSave() {            nsc.newTable.schedules = [];            angular.forEach(nsc.scheduleTable, function (object) {                for (var i = 0; i < object.scheduleCells.length; i++) {                    if (object.scheduleCells[i].label == null && object.scheduleCells[i].type == null) {                    } else {                        var scheduleCell = object.scheduleCells[i];                        var schedule = {                            "id": scheduleCell.id,                            "departmentId": nsc.departmentId.join(''),                            "employeeId": scheduleCell.employeeId,                            "label": scheduleCell.label,                            "onDutyDay": scheduleCell.onDutyDay,                            "onDutyTime": scheduleCell.onDutyTime,                            "offDutyTime": scheduleCell.offDutyTime,                            "diningDuration": scheduleCell.diningDuration || 0,                            "labelAddition": scheduleCell.labelAddition,                            "onDutyTimeAddition": scheduleCell.onDutyTimeAddition,                            "offDutyTimeAddition": scheduleCell.offDutyTimeAddition,                            "diningDurationAddition": scheduleCell.diningDurationAddition || 0,                            "fragmentBeginTime": scheduleCell.fragmentBeginTime,                            "fragmentEndTime": scheduleCell.fragmentEndTime,                            "lieuLeaveBeginTime": scheduleCell.lieuLeaveBeginTime,                            "lieuLeaveEndTime": scheduleCell.lieuLeaveEndTime,                            "labelFixedPostId": scheduleCell.labelFixedPostId,                            "labelFixedPostAdditionId": scheduleCell.labelFixedPostAdditionId,                            "beforeShiftOvertimeDuration": scheduleCell.beforeShiftOvertimeDuration || null,                            "afterShiftOvertimeDuration": scheduleCell.afterShiftOvertimeDuration || null,                            "type": saveTypeChange(scheduleCell.type)                        };                        nsc.newTable.schedules.push(schedule);                    }                }            })        }        function saveTypeChange(type) {            if (type == 'REGULAR' || type == 'REGULAR_WITH_OVERTIME') {                return null            } else {                return type;            }        }        // 时间轴数组        function getFragmentTimeOptions() {            var hour = 0, result = [];            var m = ['30', '00'];            for (var i = 0; i < 72; i++) {                var k = i % 2;                hour += k;                if (hour < 10) {                    var h = '0' + hour                } else {                    h = hour                }                result.push(h + ':' + m[k] + ':00')            }            result.splice(0, 0, '00:00:00')            return result;        }        function extendTime() {            var initTime = [];            for (var i = 0; i < 8.1; i += 0.5) {                if (i != 0) {                    initTime.push(i);                }            }            return initTime;        }        function getDays(beginDay) {            var week = [];            for (var i = 0; i < 7; i++) {                week.push(dateFormatYear(changeDay(beginDay, i)));            }            return week;        }        function dateFormat(date) {            date = new Date(date);            var month = formatToTwo(date.getMonth() + 1);            var day = formatToTwo(date.getDate());            return month + '-' + day;        }        function dateFormatYear(date) {            date = new Date(date);            var year = date.getFullYear();            var month = formatToTwo(date.getMonth() + 1);            var day = formatToTwo(date.getDate());            return year + '-' + month + '-' + day;        }        function formatToTwo(obj) {            return obj.toString().length > 1 ? obj : ('0' + obj);        }        // 对象转数组        function transform(obj) {            var arr = [];            for (var item in obj) {                arr.push(obj[item]);            }            return arr;        }    }})();VkrmsApp.controller('FixedPostRemindModalController', ['$scope', '$modalInstance', 'CommonService', 'message', 'keyPostForShowList', function ($scope, $modalInstance, commonService, message, keyPostForShowList) {    $scope.message = message;    $scope.keyPostForShowList = keyPostForShowList;    setTimeout(function () {        $('.modal-dialog').width(800);    }, 200);    $scope.ok = function () {        $modalInstance.dismiss('cancel');    };}]);