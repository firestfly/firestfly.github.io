(function () {    'use strict';    angular        .module('vkrmsApp')        .controller('ScheduleController', ScheduleController);    ScheduleController.$inject = ['$scope', '$rootScope', '$http', '$timeout', 'CommonService', 'ScheduleService'];    function ScheduleController($scope, $rootScope, $http, $timeout, commonService, scheduleService) {        var searchParam = null;        scheduleService.getImportScheduleResult();        scheduleService.initScopeVariable();        scheduleService.initImportSchedule();        scheduleService.getLoginUserData();        $scope.editSchedule = editSchedule;        $scope.cancel = cancel;        $scope.saveTable = saveTable;        $scope.copyPreviousWeekScheduleSheet = copyPreviousWeekScheduleSheet;        $scope.copyPreviousDay = copyPreviousDay;        $scope.checkKeyPost = checkKeyPost;        $scope.search = search;        $scope.export = exportSchedule;        $scope.schedulePreviousWeek = schedulePreviousWeek;        $scope.scheduleNextWeek = scheduleNextWeek;        $scope.beforeShiftOvertimeDurationValueChange = beforeShiftOvertimeDurationValueChange;        $scope.shiftOptionValueChange = shiftOptionValueChange;        $scope.afterShiftOvertimeDurationValueChange = afterShiftOvertimeDurationValueChange;        $scope.otherTypeValueChange = otherTypeValueChange;        $scope.fragmentBeginTimeValueChange = fragmentBeginTimeValueChange;        $scope.fragmentEndTimeValueChange = fragmentEndTimeValueChange;        $scope.additionShiftOptionValueChange = additionShiftOptionValueChange;        $scope.labelFixedPostValueChange = labelFixedPostValueChange;        $scope.labelFixedPostAdditionValueChange = labelFixedPostAdditionValueChange;        $scope.lieuLeaveBeginTimeValueChange = lieuLeaveBeginTimeValueChange;        $scope.lieuLeaveEndTimeValueChange = lieuLeaveEndTimeValueChange;        $scope.checkOtherType = checkOtherType;        $scope.totalCheckOverlappingTime = totalCheckOverlappingTime;        $scope.showLabel = showLabel;        $scope.showAdditionLabel = showAdditionLabel;        $scope.isFixedPostId = scheduleService.isFixedPostId;        $scope.isDisabled = isDisabled;        $scope.checkLocked = checkLocked;        function checkLocked(locked) {            if (locked) {                commonService.alert({                    content: '已定案的排班不能修改',                    icon: 'fa-exclamation-circle',                    iconColor: 'icon-red'                });            }        }        function schedulePreviousWeek() {            search("previous");        }        function scheduleNextWeek() {            search("next");        }        function showLabel(scheduleCell) {            return scheduleService.extractLabel(scheduleCell.shiftOptionValue);        }        function showAdditionLabel(scheduleCell) {            return scheduleService.extractLabel(scheduleCell.additionShiftOptionValue);        }        function editSchedule() {            $rootScope.loading = true;            $timeout(function () {                $scope.tableform.$show();                //$scope.beforeEditScheduleTable = $scope.scheduleTable;            }, 200, false);            $timeout(function () {                $rootScope.loading = false;                $scope.$apply();            }, 200, false);        }        function cancel() {            //$scope.scheduleTable = $scope.beforeEditScheduleTable;            search();        }        function saveTable() {            var scheduleSheet = scheduleService.buildScheduleSheet();            $http.put(apiBaseUrl + "/schedule-sheet", scheduleSheet, {headers: utils.generateHeaders()})                .then(function (result) {                    var status = result.status;                    var dataStatus = result.data.status;                    var scheduleSheet = result.data;                    if (null != dataStatus && dataStatus != undefined && (dataStatus == "AttendanceIsLockException" )) {                        commonService.alert({                            content: scheduleSheet.errorMessage,                            icon: "fa-exclamation-circle",                            iconColor: "icon-red"                        });                        $scope.tableform.$show();                    }                    if (null != dataStatus && dataStatus != undefined && (dataStatus == "fail" )) {                        commonService.alert({                            content: result.data.errorMessage,                            icon: "fa-exclamation-circle",                            iconColor: "icon-red"                        });                        $scope.tableform.$show();                    } else {                        scheduleService.updateScheduleId(scheduleSheet);                    }                    // Remind key fixed post status                    var keyPostRemindingInfo = result.data.resultInfo;                    if (keyPostRemindingInfo.length > 0) {                        var keyPostForShowList = [];                        for (var len = keyPostRemindingInfo.length; len--;) {                            var scheduleDate = keyPostRemindingInfo[len].date;                            var keyPostList = keyPostRemindingInfo[len].shiftFixedPosts;                            for (var lenn = keyPostList.length; lenn--;) {                                var keyPost = keyPostList[lenn];                                keyPostForShowList.push({                                    date: scheduleDate,                                    keyPostName: keyPost.fixedPostName,                                    shiftName: keyPost.shiftLabel,                                    shiftBeginTime: keyPost.onDutyTime,                                    shiftEndTime: keyPost.offDutyTime,                                    exp: keyPost.experience                                });                            }                        }                        var newJobRuleModal = commonService.createModal({                            'templateUrl': 'fixedPostRemindDialog.html',                            'controller': 'FixedPostRemindModalController',                            'resolve': {                                'message': function () {                                    return '以下关键岗位还没排班：';                                },                                'keyPostForShowList': function () {                                    return keyPostForShowList;                                }                            }                        });                    }                }, function (result) {                    commonService.alert({                        content: '网络异常，请重新连接网络',                        icon: "fa-exclamation-circle",                        iconColor: "icon-red"                    });                    $scope.tableform.$show();                });        }        function checkKeyPost(dateAndWeekday) {            var onDutyDay = dateAndWeekday.split('（')[0];            var day = new Date().getFullYear() + '-' + onDutyDay;            scheduleService.checkKeyPost($scope.selectedDepartments[0].department_id, day)                .then(function (fixedPostSchedules) {                    var keyPostRemindingInfo = fixedPostSchedules;                    if (keyPostRemindingInfo.length > 0) {                        var keyPostForShowList = [];                        for (var len = keyPostRemindingInfo.length; len--;) {                            var keyPost = keyPostRemindingInfo[len];                            var employeeName = keyPost.employeeName;                            var keyPostForShow = {                                keyPostName: keyPost.fixedPostName,                                shiftName: keyPost.shiftLabel,                                shiftBeginTime: keyPost.onDutyTime,                                shiftEndTime: keyPost.offDutyTime,                                exp: keyPost.experience                            };                            if (employeeName == null) {                                employeeName = '未排班';                                keyPostForShow.notArrange = true;                            }                            keyPostForShow.employeeName = employeeName;                            keyPostForShowList.push(keyPostForShow);                        }                        var newJobRuleModal = commonService.createModal({                            'templateUrl': 'fixedPostRemindDialog.html',                            'controller': 'FixedPostRemindModalController',                            'resolve': {                                'message': function () {                                    return '关键岗位排班情况如下：'                                },                                'keyPostForShowList': function () {                                    return keyPostForShowList;                                }                            }                        });                    }                });        }        function copyPreviousDay(dateAndWeekday, type) {            var onDutyDay = dateAndWeekday.split('（')[0];            var day = new Date().getFullYear() + '-' + onDutyDay;            var yesterday = scheduleService.getDateStr(day, -1);            var dayIndex = scheduleService.getDayIndex(onDutyDay);            var schedules = [];            var scheduleTemps = scheduleService.buildScheduleSheet().schedules;            var isEmpty = true;            var firstDaySchedules = JSON.parse(JSON.stringify($scope.$parent.firstDaySchedules));            var lastDaySchedules = JSON.parse(JSON.stringify($scope.$parent.lastDaySchedules));            scheduleTemps = scheduleTemps                .concat(firstDaySchedules)                .concat(lastDaySchedules);            angular.forEach(scheduleTemps, function (scheduleTemp) {                if (scheduleTemp.onDutyDay == day) {                    isEmpty = false;                }                if (scheduleTemp.onDutyDay == yesterday) {                    scheduleTemp.onDutyDay = day;                    scheduleTemp.id = null;                    if (type) {                        var index = switchShiftArray($scope.defaultShifts).indexOf(scheduleTemp.label);                        if (scheduleTemp.label && index >= 0 && $scope.defaultShifts[index].switchShiftLabel) {                            scheduleTemp.label = $scope.defaultShifts[index].switchShiftLabel;                            scheduleTemp.onDutyTime = $scope.defaultShifts[index].switchOnDutyTime;                            scheduleTemp.offDutyTime = $scope.defaultShifts[index].switchOffDutyTime;                            scheduleTemp.diningDuration = $scope.defaultShifts[index].switchDiningDuration;                        }                        scheduleTemp.labelAddition = null;                        scheduleTemp.labelFixedPostAdditionId = null;                        scheduleTemp.lieuLeaveEndTime = null;                        scheduleTemp.lieuLeaveBeginTime = null;                        scheduleTemp.fragmentBeginTime = null;                        scheduleTemp.fragmentEndTime = null;                        scheduleTemp.diningDurationAddition = null;                        scheduleTemp.onDutyTimeAddition = null;                        scheduleTemp.offDutyTimeAddition = null;                        scheduleTemp.type = null;                    }                    schedules.push(scheduleTemp);                }            });            if (!isEmpty) {                commonService.confirm({                    content: '确定删除当天排班信息，并复制前一天排班信息到当天吗？',                    callback: function () {                        angular.forEach($scope.scheduleTable, function (scheduleRow) {                            angular.extend(scheduleRow.scheduleCells[dayIndex], scheduleService.getEmptyScheduleCell());                        });                        scheduleService.applySchedules(schedules, type);                    }                });            } else {                angular.forEach($scope.scheduleTable, function (scheduleRow) {                    angular.extend(scheduleRow.scheduleCells[dayIndex], scheduleService.getEmptyScheduleCell());                });                scheduleService.applySchedules(schedules, type);            }        }        function switchShiftArray(item) {            var str = [];            angular.forEach(item, function (data) {                str.push(data.label)            })            return str;        }        function copyPreviousWeekScheduleSheet() {            var firstDay = $scope.days[0],                year = new Date().getFullYear(),                fullFirstDay = year + "-" + firstDay,                previousWeekDateMilliSecond = Date.parse(fullFirstDay.replace(/-/g, "/")) - 7 * 24 * 60 * 60 * 1000;            console.log(previousWeekDateMilliSecond)            $http.get(apiBaseUrl + "/schedule-sheet/" + previousWeekDateMilliSecond, {                params: {search: getSearchInfo()}            })                .then(scheduleService.copyPreviousSuccess)                .then(function () {                    $scope.scheduleTable = $rootScope.scheduleTable                })                .then(null, scheduleService.copyPreviousFail);        }        function checkOtherType(selectObj, scheduleCell) {            var data = selectObj.$data;            scheduleCell.otherType = data;            switch (data) {                case 0:                    break;                case 1:                    if (scheduleCell.fragmentBeginTimeId == 0 || scheduleCell.fragmentEndTimeId == 0) {                        scheduleCell.otherType = 0;                        selectObj.$editable.attrs.$$element.context.innerText = '-';                    }                    break;                case 3:                    if ($.isEmpty(scheduleCell.additionShiftOptionValue)) {                        scheduleCell.otherType = 0;                        selectObj.$editable.attrs.$$element.context.innerText = '-';                    }                    break;                default :                    break;            }        }        //二行下拉 valuechange        function otherTypeValueChange(selectObj, scheduleCell) {            var data = selectObj.$data;            scheduleCell.otherType = data;            switch (data) {                case 0:                    //清空加班                    scheduleCell.fragmentBeginTimeId = 0;                    scheduleCell.fragmentBeginTime = '-';                    scheduleCell.fragmentEndTimeId = 0;                    scheduleCell.fragmentEndTime = '-';                    //清空调休                    scheduleCell.lieuLeaveBeginTime = null;                    scheduleCell.lieuLeaveEndTime = null;                    //清空班次                    scheduleCell.additionShiftOptionValue = "-|null|null|null";                    scheduleCell.labelFixedPostAdditionId = '0';                    break;                case 1:                    //清空调休                    scheduleCell.lieuLeaveBeginTime = null;                    scheduleCell.lieuLeaveEndTime = null;                    //清空班次                    scheduleCell.additionShiftOptionValue = "-|null|null|null";                    scheduleCell.labelFixedPostAdditionId = '0';                    break;                case 3:                    //清空加班                    scheduleCell.fragmentBeginTimeId = 0;                    scheduleCell.fragmentBeginTime = '-';                    scheduleCell.fragmentEndTimeId = 0;                    scheduleCell.fragmentEndTime = '-';                    //清空调休                    scheduleCell.lieuLeaveBeginTime = null;                    scheduleCell.lieuLeaveEndTime = null;                    break;                case 6:                    //去掉下拉框里的调休和班次                    if (scheduleCell.otherTypeOptions.length == 24) {                        scheduleCell.otherTypeOptions.splice(2, 4);                        scheduleCell.otherTypeOptions.splice(3, 18);                    }                    //清空常规班次                    scheduleCell.label = '-';                    scheduleCell.shiftOptionValue = '-|null|null|null';                    //清空扩展加班                    scheduleCell.beforeShiftOvertimeDurationId = 0;                    scheduleCell.afterShiftOvertimeDurationId = 0;                    //清空加班                    scheduleCell.fragmentBeginTimeId = 0;                    scheduleCell.fragmentBeginTime = '-';                    scheduleCell.fragmentEndTimeId = 0;                    scheduleCell.fragmentEndTime = '-';                    //清空调休                    scheduleCell.lieuLeaveBeginTime = null;                    scheduleCell.lieuLeaveEndTime = null;                    //清空班次                    scheduleCell.additionShiftOptionValue = "-|null|null|null";                    scheduleCell.labelFixedPostId = '0';                    scheduleCell.labelFixedPostAdditionId = '0';                    break;                default :                    var shift = scheduleService.getShift(scheduleCell);                    $.extend(scheduleCell, scheduleCell, shift, {                        id: scheduleCell.id                    });                    scheduleCell.lieuLeaveBeginTime = scheduleCell.onDutyTime.subTime();                    scheduleCell.lieuLeaveEndTime = scheduleService.convertEndTime(scheduleCell.onDutyTime.subTime(), scheduleCell.offDutyTime.subTime());                    scheduleCell.lieuLeaveOptions = scheduleService.getLieuLeaveOptions(scheduleCell.lieuLeaveBeginTime, scheduleCell.lieuLeaveEndTime);                    scheduleCell.lieuLeaveBeginTimeId = scheduleService.getIdFromValue(scheduleCell.lieuLeaveBeginTime, scheduleCell.lieuLeaveOptions);                    scheduleCell.lieuLeaveEndTimeId = scheduleService.getIdFromValue(scheduleCell.lieuLeaveEndTime, scheduleCell.lieuLeaveOptions);                    //清空扩展加班                    scheduleCell.beforeShiftOvertimeDurationId = 0;                    scheduleCell.beforeShiftOvertimeDuration = 0;                    scheduleCell.afterShiftOvertimeDurationId = 0;                    scheduleCell.afterShiftOvertimeDuration = 0;                    //清空加班                    scheduleCell.fragmentBeginTimeId = 0;                    scheduleCell.fragmentBeginTime = '-';                    scheduleCell.fragmentEndTimeId = 0;                    scheduleCell.fragmentEndTime = '-';                    //清空班次                    scheduleCell.additionShiftOptionValue = "-|null|null|null";                    scheduleCell.labelFixedPostAdditionId = '0';                    break;            }            //检查时间重叠问题            scheduleService.checkOverlappingTime(scheduleCell);        }        //班次下拉valuechange事件        function additionShiftOptionValueChange(selectObj, scheduleCell, experience) {            var data = selectObj.$data;            scheduleCell.additionShiftOptionValue = data;            scheduleCell.labelAddition = scheduleService.extractLabel(data);            var arr = data.split('|');            if ($.isEmpty(scheduleCell.additionShiftOptionValue)) {                selectObj.$$nextSibling.$data = 0;                scheduleCell.labelAddition = null;                scheduleCell.onDutyTimeAddition = null;                scheduleCell.offDutyTimeAddition = null;                scheduleCell.diningDurationAddition = null;            } else {                scheduleCell.labelAddition = arr[0];                scheduleCell.onDutyTimeAddition = arr[1];                scheduleCell.offDutyTimeAddition = arr[2];                scheduleCell.diningDurationAddition = arr[3];            }            scheduleService.checkOverlappingTime(scheduleCell)            && scheduleService.checkExperience(scheduleCell.labelAddition, scheduleCell.labelFixedPostAdditionId, experience, scheduleCell);        }        //前扩展检查        function beforeShiftOvertimeDurationValueChange(selectObj, scheduleCell) {            var data = selectObj.$data;            scheduleCell.beforeShiftOvertimeDurationId = data;            scheduleCell.beforeShiftOvertimeDuration = scheduleService.getValueFromId(data, scheduleService.getDutyWorkingDurationOptions());            if (!(scheduleService.checkShiftOverStartime(scheduleCell) && scheduleService.checkOverlappingTime(scheduleCell))) {                //selectObj.$editable.elem[0].nextElementSibling.firstElementChild.firstElementChild.style.borderColor = '#a94442';            } else {                selectObj.$editable.elem[0].nextElementSibling.firstElementChild.firstElementChild.style.borderColor = '#cccccc';            }        }        //后扩展检查        function afterShiftOvertimeDurationValueChange(selectObj, scheduleCell) {            var data = selectObj.$data;            scheduleCell.afterShiftOvertimeDurationId = data;            scheduleCell.afterShiftOvertimeDuration = scheduleService.getValueFromId(data, scheduleService.getDutyWorkingDurationOptions());            return scheduleService.checkShiftOverEndtime(scheduleCell) && scheduleService.checkOverlappingTime(scheduleCell);        }        //加班开始时间检查        function fragmentBeginTimeValueChange(selectObj, scheduleCell) {            var data = selectObj.$data;            scheduleCell.fragmentBeginTimeId = data;            scheduleCell.fragmentBeginTime = scheduleService.getValueFromId(data, scheduleService.getFragmentTimeOptions(23, 0));            if (scheduleCell.fragmentBeginTimeId != 0 && scheduleCell.fragmentEndTimeId != 0) {                return scheduleService.checkStartEndTime(scheduleCell) && scheduleService.checkOverlappingTime(scheduleCell);            }        }        //加班结束时间检查        function fragmentEndTimeValueChange(selectObj, scheduleCell) {            var data = selectObj.$data;            scheduleCell.fragmentEndTimeId = data;            scheduleCell.fragmentEndTime = scheduleService.getValueFromId(data, scheduleService.getFragmentTimeOptions(36, 1));            if (scheduleCell.fragmentBeginTimeId != 0 && scheduleCell.fragmentEndTimeId != 0) {                return scheduleService.checkStartEndTime(scheduleCell) && scheduleService.checkOverlappingTime(scheduleCell);            }        }        //保存时检查        function totalCheckOverlappingTime(scheduleTable) {            for (var i = 0; i < scheduleTable.length; i++) {                var jobId = scheduleTable[i].employee.jobId;                var jobName = scheduleTable[i].employee.jobName;                var experience = scheduleTable[i].employee.experience;                for (var j = 0; j < scheduleTable[i].scheduleCells.length; j++) {                    if (!($.isEmpty(scheduleTable[i].scheduleCells[j].label) && $.isEmpty(scheduleTable[i].scheduleCells[j].fragmentBeginTime) &&                        $.isEmpty(scheduleTable[i].scheduleCells[j].fragmentEndTime))) {                        var scheduleCell = scheduleTable[i].scheduleCells[j];                        if (!scheduleService.checkStartEndTime(scheduleCell)                            || !scheduleService.checkShiftOverEndtime(scheduleCell)                            || !scheduleService.checkShiftOverStartime(scheduleCell)                            || !scheduleService.checkOverlappingTime(scheduleCell)                            || !scheduleService.checkLabelFixedPostNotEmpty(scheduleCell, jobId)                            || !scheduleService.checkLieuLeaveRule(scheduleCell)) {                            return "输入有误，请重新输入！";                        }                        if (scheduleService.isFixedPostId(jobId)) {                            if (!scheduleService.checkExperience(scheduleCell.label, scheduleCell.labelFixedPostId, experience, scheduleCell)                                || !scheduleService.checkExperience(scheduleCell.labelAddition, scheduleCell.labelFixedPostAdditionId, experience, scheduleCell)) {                                return "输入有误，请重新输入！";                            }                        }                    }                }            }        }        //常规班次change事件        function shiftOptionValueChange(selectObj, scheduleCell, experience) {            var shiftLabel = scheduleService.extractLabel(selectObj.$data);            scheduleCell.shiftOptionValue = selectObj.$data;            var shift = scheduleService.getShift(scheduleCell);            $.extend(scheduleCell, scheduleCell, shift, {                id: scheduleCell.id,                label: scheduleService.extractLabel(selectObj.$data)            });            if (shiftLabel == '-') {                if (scheduleCell.otherType == 2 || scheduleCell.otherType == 3) {                    scheduleCell.otherType = 0;                }                selectObj.$$nextSibling.$data = 0;                selectObj.$$prevSibling.$data = 0;                scheduleCell.afterShiftOvertimeDuration = 0;                scheduleCell.beforeShiftOvertimeDuration = 0;                scheduleCell.otherTypeOptions.splice(2, 2);                selectObj.$$nextSibling.$$nextSibling.$data = 0;                scheduleCell.labelFixedPostAdditionId = '0';                //检查时间重叠问题                scheduleService.checkOverlappingTime(scheduleCell);            } else {                if (scheduleCell.otherTypeOptions.length < $scope.$parent.otherTypes.length) {                    scheduleCell.otherTypeOptions = scheduleService.getOtherTypeOptions();                }                scheduleCell.beforeShiftOvertimeDurationOptions = scheduleService.getDutyWorkingDurationOptions();                scheduleCell.afterShiftOvertimeDurationOptions = scheduleService.getDutyWorkingDurationOptions();                //二常规下拉列表 优化                scheduleCell.additionShiftOptions = scheduleService.getShiftOptions();                scheduleCell.additionShiftOptions = scheduleCell.additionShiftOptions.del('value', scheduleCell.shiftOptionValue);                if (scheduleCell.shiftOptionValue == scheduleCell.additionShiftOptionValue) {                    scheduleCell.additionShiftOptionValue = "-|null|null|null";                }                if (scheduleCell.otherType >= 2 && scheduleCell.otherType != 3) {                    //设置为调休时  更改调休时间                    scheduleCell.lieuLeaveBeginTime = scheduleCell.onDutyTime.subTime();                    scheduleCell.lieuLeaveEndTime = scheduleService.convertEndTime(scheduleCell.onDutyTime.subTime(), scheduleCell.offDutyTime.subTime());                    scheduleCell.lieuLeaveOptions = scheduleService.getLieuLeaveOptions(scheduleCell.lieuLeaveBeginTime, scheduleCell.lieuLeaveEndTime);                    scheduleCell.lieuLeaveBeginTimeId = scheduleService.getIdFromValue(scheduleCell.lieuLeaveBeginTime, scheduleCell.lieuLeaveOptions);                    scheduleCell.lieuLeaveEndTimeId = scheduleService.getIdFromValue(scheduleCell.lieuLeaveEndTime, scheduleCell.lieuLeaveOptions);                    scheduleService.checkOverlappingTime(scheduleCell);                } else {                    //检查当天开始时间早于0点                    scheduleService.checkShiftOverStartime(scheduleCell)                        //检查当天结束时间晚于次日12点                    && scheduleService.checkShiftOverEndtime(scheduleCell)                        //检查时间重叠问题                    && scheduleService.checkOverlappingTime(scheduleCell)                        //检查经验值                    && scheduleService.checkExperience(scheduleCell.labelAddition, scheduleCell.labelFixedPostId, experience, scheduleCell);                }            }        }        //experience--人员经验值        function labelFixedPostValueChange(selectObj, scheduleCell, experience) {            var data = selectObj.$data;            scheduleCell.labelFixedPostId = data;            scheduleService.checkExperience(scheduleCell.label, data, experience, scheduleCell);        }        //experience--人员经验值        function labelFixedPostAdditionValueChange(selectObj, scheduleCell, experience) {            var data = selectObj.$data;            scheduleCell.labelFixedPostAdditionId = data;            scheduleService.checkExperience(scheduleCell.labelAddition, data, experience, scheduleCell);        }        //调休开始时间change事件        function lieuLeaveBeginTimeValueChange(selectObj, scheduleCell) {            var data = selectObj.$data;            scheduleCell.lieuLeaveBeginTimeId = data;            scheduleCell.lieuLeaveBeginTime = scheduleService.getValueFromId(data, scheduleCell.lieuLeaveOptions).subTime();            scheduleService.checkLieuLeaveRule(scheduleCell);        }        //调休结束时间change时间        function lieuLeaveEndTimeValueChange(selectObj, scheduleCell) {            var data = selectObj.$data;            scheduleCell.lieuLeaveEndTimeId = data;            scheduleCell.lieuLeaveEndTime = scheduleService.getValueFromId(data, scheduleCell.lieuLeaveOptions).subTime();            scheduleService.checkLieuLeaveRule(scheduleCell);        }        function exportSchedule() {            if (!isSearchInfoValid()) {                return;            }            var week = scheduleService.getWeekInterval();            var params = searchParam || {                "departments": _.pluck($scope.selectedDepartments, 'department_id'),                "workingGroups": _.pluck($scope.selectedGroups, 'work_group_id'),                "standardWorkJobs": _.pluck($scope.selectedStandardWorkJobs, 'workJobId'),                "beginDate": utils.formatDate(week.beginDate),                "endDate": utils.formatDate(week.endDate),                "keywords": $scope.keywords            };            var url = baseUrl + "/file/export-schedule-sheet";            commonService.downloadFile(url, params);            /*        var workingGroupsParam = null == params.workingGroups || params.workingGroups.length == 0 ? "" : "&workingGroups=" + params.workingGroups;             var departmentsParam = null == params.departments || params.departments.length == 0 ? "" : "&departments=" + params.departments;             var url = baseUrl + "/file/export-excel-schedule-sheet" + "?beginDate=" + params.beginDate +             "&endDate=" + params.endDate + "&keywords=" + params.keywords + workingGroupsParam + departmentsParam;             location.href = url;*/        }        function getSearchInfo(type) {            var week = scheduleService.getWeekInterval(type);            var searchInfo = {                "departments": _.pluck($scope.selectedDepartments, 'department_id'),                "workingGroups": _.pluck($scope.selectedGroups, 'work_group_id'),                "standardWorkJobs": _.pluck($scope.selectedStandardWorkJobs, 'workJobId'),                "beginDate": utils.formatDate(week.beginDate),                "endDate": utils.formatDate(week.endDate),                "keywords": $scope.keywords            };            return searchInfo;        }        function search(type) {            if (!isSearchInfoValid()) {                return;            }            searchParam = getSearchInfo(type);            commonService.storageSearchStatus($scope, {                selectedCompanies: $scope.selectedCompanies,                selectedDepartments: $scope.selectedDepartments,                departments: $scope.departments,                selectedGroups: $scope.selectedGroups,                beginDate: commonService.getSelectedDates().beginDate,                endDate: commonService.getSelectedDates().endDate,                keywords: $scope.keywords,                selectedStandardWorkJobs: $scope.selectedStandardWorkJobs            });            //查询            $http.get(apiBaseUrl + "/schedule-sheet", {                params: {search: searchParam}            }).success(function (scheduleSheet) {                //if(scheduleSheet.exceptionType == "IndexOutOfBoundsException"){                //    commonService.alert({                //        content: "查询无结果！",                //        icon: "fa-exclamation-circle"                //    });                //    return ;                //}                var departmentId = _.pluck($scope.selectedDepartments, 'department_id');                $scope.$parent.departmentId = departmentId.length > 0 ? departmentId[0] : "";                //获取项目班次组信息                scheduleService.getShiftsFromServer(departmentId)                    .then(function (shifts) {                        $scope.defaultShifts = shifts;                        if (shifts) {                            $scope.$parent.shifts = $scope.$parent.defaultShifts.concat(shifts);                        }                        //获取岗位信息                        scheduleService.getPostOptionsFromServer(departmentId)                            .then(function (response) {                                $rootScope.fixedPostsAndShift = response.fixedPostsAndShift;                                var str = JSON.stringify($rootScope.fixedPostsAndShift);                                var fixedPosts = response.fixedPosts;                                fixedPosts && fixedPosts.forEach(function (v, i) {                                    if (str.indexOf(v.fixedPostId) >= 0) {                                        v.fixedPostName = "*" + v.fixedPostName;                                    }                                });                                $rootScope.fixedPostOptions = $scope.defaultFixedPostOptions.concat(fixedPosts);                                scheduleService.applyScheduleSheet(scheduleSheet);                                $scope.scheduleTable = $rootScope.scheduleTable;                            });                    });            });        }        function isSearchInfoValid() {            if (!$scope.selectedDepartments || $scope.selectedDepartments.length < 1) {                commonService.alert({                    content: "请选择查询部门",                    icon: "fa-exclamation-circle"                });                return false;            }            if (!$scope.selectedGroups || $scope.selectedGroups.length < 1) {                commonService.alert({                    content: "请选择岗位专业分类",                    icon: "fa-exclamation-circle"                });                return false;            }            return true;        }        function isDisabled(obj) {            return $.isEmpty(obj);        }    }})();VkrmsApp.controller('FixedPostRemindModalController', ['$scope', '$modalInstance', 'CommonService', 'message', 'keyPostForShowList', function ($scope, $modalInstance, commonService, message, keyPostForShowList) {    $scope.message = message;    $scope.keyPostForShowList = keyPostForShowList;    setTimeout(function () {        $('.modal-dialog').width(800);    }, 200);    $scope.ok = function () {        $modalInstance.dismiss('cancel');    };}]);